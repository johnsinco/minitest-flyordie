require 'minitest'

module Minitest

  def self.plugin_flyordie_options(opts, options)
    opts.on "--maxslow COUNT", Integer, "Maximum number of allowable slow tests before build failed." do |c|
      options[:maxslow] = c
    end
  end

  def self.plugin_flyordie_init(options)
    self.reporter << FlyOrDieReporter.new(options) if options[:maxslow] || options[:slowtime]
  end

  class FlyOrDieReporter < AbstractReporter
    attr_accessor :slowtests, :maxslow, :slowtime

    def initialize(options)
      self.maxslow = options[:maxslow] || 5
      self.slowtime = options[:slowtime] || 50
      self.slowtests = []
    end

    def record(result)
      self.slowtests << result if result.time > self.slowtime * 1000
    end

    def passed?
      self.slowtests.length < self.maxslow
    end

    def report
      return if passed?
      puts
      puts "#{self.slowtests.count} tests exceeded the maximum duration of #{self.maxslow}"
      puts
      self.slowtests.each do |st|
        puts "#{st[0]} -----  #{st[1]}"
      end
      puts
    end

  end

end
